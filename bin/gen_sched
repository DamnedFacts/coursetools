#!/Users/res/.virtualenvs/coursetools/bin/python3.6

from enum import Enum
from datetime import datetime, time, timedelta
from math import ceil
from collections import OrderedDict
import yaml
from courselib.weekday import Weekday
from courselib.instructor_access import InstructorAccess
from courselib.config import config

access = InstructorAccess()
access.login()
courses = access.course_query(config['registrar']['term'])
access.logout()

def collate_topics(lectures):
    topics = ()

    for lecture in lectures:
        freqs = {}
        for topic in lecture:
            freqs[topic['title']] = topic['frequency']

        stop = False
        while not stop:
            sub_topics = ()
            for topic in lecture:
                if freqs[topic['title']] > 0:
                    sub_topics += (topic['title'],)
                    freqs[topic['title']] -= 1
                elif sum(freqs.values()) == 0:
                    stop = True

            if sub_topics:
                topics += (sub_topics,)
    return topics

"""
The following configuration variables need to be placed in the
config.yaml.
"""
# Get workshop days of the week
ws_days = set()   # Make sure all repeats are removed

# for workshop_crn in config['registrar']['workshops']:
#     workshop_day_codes = courses[workshop_crn]['days']
#     for day in workshop_day_codes:
#         ws_days.add(Weekday(day))
ws_days = tuple(sorted({Weekday(day)
                        for workshop_crn in config['registrar']['workshops']
                        if workshop_crn in courses
                        for day in courses[workshop_crn]['days']}))

session_start = config['registrar']['session_start']
session_end = config['registrar']['session_end']
breaks = config['gen_sched']['breaks']

last_lecture_day = -1
for crn in config['registrar']['crn']:
    for day in list(courses[crn]['days']):
        if Weekday(day) > last_lecture_day:
            last_lecture_day = Weekday(day)

workshop_day = [d for d in ws_days if d > last_lecture_day][0]

# Multiple topics per lecture can be placed in a tuple.
#topics = tuple(tuple(topic['title']
#                     for topic in lecture)
#               for lecture in config['gen_sched']['lectures'])
topics = collate_topics(config['gen_sched']['lectures'])

workshops = tuple(topic['title']
                  for lecture in config['gen_sched']['lectures']
                  for topic in lecture
                  if topic['graded'])

quizzes = workshops

if len(config['gen_sched']['labs']) > 1:
    labs = tuple(config['gen_sched']['labs'])
else:
    labs = workshops

exams = config['gen_sched']['exams']
misc = config['gen_sched']['misc']
summer = config['gen_sched']['summer_schedule']
sched_file = config['gen_sched']['output_file']


# Project related
adj_session_start = session_start - timedelta(days=session_start.weekday())
total_days = (session_end - adj_session_start).days + 1
total_weeks = int(total_days/7) + 1
due_week_delta = config['gen_sched']['projects']['due_week_delta']
milestone_weeks = [total_weeks//2,
                   total_weeks//2+due_week_delta,
                   total_weeks//2+due_week_delta*2]
milestones = list(zip(milestone_weeks,
                 config['gen_sched']['projects']['milestones']))

# TODO: The preceding configuration variables need to be placed in the
# config.yaml.

#
# The following configurations below should not need to be changed.
#
session_start_weekday = session_start.weekday()
first_week = session_start - timedelta(days=(session_start_weekday))
final_week = ceil((session_end - first_week).days/7)
week = 0
lecture_num = 0
topic_num = 0
workshop_num = 0
quiz_num = 0
labs_num = 0
wss_num = 0
break_bump = False
sched_fh = None
states = []

dump_dict = dict()


def dump_agenda(category, label, day, title, desc, days_due):
    due_time = config['gen_sched']['due_time']
    if category not in dump_dict:
        dump_dict[category] = OrderedDict()

    if day:
        dump_dict[category][label] = {'date': datetime.combine(day, due_time),
                                      'title': title,
                                      'description': desc,
                                      'days_due': days_due}
    else:
        dump_dict[category][label] = {'title': title,
                                      'description': desc,
                                      'days_due': days_due}


def print_agenda(day, agenda):
    if __name__ != '__main__':
        return

    if day:
        print(day.strftime(",\"%a, %b %-d %Y\",\"{0}\"".format(agenda)),
              file=sched_fh)
    else:
        print(agenda, file=sched_fh)


def eq_topic(topic1, topic2):
    if not isinstance(topic1, tuple):
        topic1 = (topic1,)
    if not isinstance(topic2, tuple):
        topic2 = (topic2,)
    for t1 in topic1:
        for t2 in topic2:
            if t1 == t2:
                return True
    return False

def is_topic(topic, category=topics):
    grouped_topics = ()
    if isinstance(topic, tuple):
        grouped_topics += topic
    else:
        grouped_topics += (topic,)

    for gt in grouped_topics:
        for t in category:
            if isinstance(t, tuple) and gt in t:
                return t
            if (t and t[0] == "+" and t[1:] == gt) or t == gt:
                return t

    return False

def is_misc(day, category=None):
    events = misc.get(day)
    if isinstance(events, tuple) and isinstance(events[0], tuple):
        found = False
        for event in events:
            found = event[1] == category
        return found
    elif events:
        return events[1] == category
    else:
        return False


def gen_misc(day, class_state):
    #
    # Miscellaneous Items
    # This is first because these items are likely needed to be
    # scheduled directly and without regard to scheduling dependencies
    # created below.
    events = misc.get(day)
    if isinstance(events, tuple) and isinstance(events[0], tuple):
        for event in events:
            print_agenda(day, "{0}".format(event[0]))
    elif events:
        print_agenda(day, "{0}".format(misc[day][0]))


def gen_breaks(day, class_state):
    #
    # Academic breaks
    #
    break_name, break_dates = class_state.get_break()
    if break_name:
        # If the current incremented date falls within a break period
        print_agenda(day, "*{0}*".format(break_name))
        break_len = (break_dates['end'] - break_dates['start']).days + 1
        return break_name, break_dates, break_len

    return break_name, break_dates, None


def gen_exams(day, break_name, class_state):
    """ Exams """
    if exams.get(day) and not break_name:
        print_agenda(day, "Exam: {0}".format(exams[day][0]))


def gen_lectures(day, weekday, lecture_num, break_name, break_dates,
                 break_len, topic_num, class_state):
    """ Lecture topics """

    if not class_state.is_classday():
        pass
    elif is_misc(day, 'lecture'):
        pass
    elif class_state.cancel_threshold() and \
        (topics.count(topics[topic_num]) * len(config['registrar']['crn']) >=
         class_state.len()):
        print_agenda(day, "**Lecture**: No lecture today.")
    elif class_state.cancel_threshold(future=True) and \
        (topics.count(topics[topic_num]) * len(config['registrar']['crn']) >=
         class_state.len()):
        print_agenda(day, "**Lecture**: No lecture today.")
    elif exams.get(day, (False, False))[1]:
        class_state.cancelled()
    elif exams.get(day - timedelta(days=1), (False, False))[1]:
        print_agenda(day, "**Lecture**: No lecture today.")
        class_state.cancelled()
    elif exams.get(day + timedelta(days=1), (False, False))[1]:
        print_agenda(day, "**Lecture**: No lecture today.")
        class_state.cancelled()
    elif class_state.is_break():
        class_state.cancelled()
    elif not break_name:
        try:
            class_state.set_finished()
            class_state.set_topic(topics[lecture_num])
            section = class_state.section()

            if len(config['registrar']['crn']) > 1:
                agenda = "**Lecture** *({1} section)*: ".format(section)
            else:
                agenda = "**Lecture**: "

            if not isinstance(topics[lecture_num], tuple):
                agenda += " " + topics[lecture_num]
            else:
                n = ()
                for x in topics[lecture_num]:
                    try:
                        n += ("{1}-{0}".format(x, workshops.index(x) + 1),)
                        if not eq_topic(x, topics[lecture_num + 1]):
                            topic_num += 1
                            class_state.topic_inc()
                    except ValueError:
                        n += ("{0}".format(x),)

                agenda += ", ".join(n)

            print_agenda(day, agenda)
            if class_state.group_finished():
                lecture_num += 1
        except IndexError:
            print("No lecture topic assigned for {0}".format(day))
            print_agenda(day, "**Lecture**: No lecture topic assigned.")

    return lecture_num, topic_num


def gen_workshop(day, weekday, break_name, break_len, workshop_num,
                 class_state):
    #
    # Workshop Cycles
    #
    if not ws_days:
        pass
    #elif week == 1 and weekday == workshop_day:
    #    print_agenda(day, "No workshop cycle this week.")
    elif weekday != workshop_day:
        pass
    elif is_misc(day, 'workshop'):
        pass
    elif class_state.cancel_threshold() and\
            topics.count(topics[topic_num]) > class_state.len():
        print_agenda(day, "No workshop cycle this week.")
    elif (day + timedelta(days=len(ws_days))) > session_end:
        print_agenda(day, "No workshop cycle this week.")
    elif class_state.cancel_threshold(future=True) and \
        (topics.count(topics[topic_num]) * len(config['registrar']['crn']) >
         class_state.len()):
        print_agenda(day, "No workshop cycle this week.")
    elif ((break_name and break_len > (round(len(ws_days)*0.3))) or
          #or (not is_topic(topics[lecture_num], workshops) or
          # not is_topic(topics[lecture_num + 1], workshops)) or
          is_topic(workshops[workshop_num]) == topics[lecture_num]):
        print_agenda(day, "No workshop cycle this week.")
    elif week == 1 and is_topic(workshops[workshop_num]):
        pass
    elif week < final_week and is_topic(workshops[workshop_num]):
        agenda = "Workshop Cycle "
        t_list = []
        w_num = workshop_num

        for i in range(workshop_num, topic_num):
            t_list.append("{0}".format(w_num + 1))
            w_num += 1
        agenda += " & ".join(t_list) + ": "

        t_list.clear()
        for i in range(workshop_num, topic_num):
            t_list.append("{0}".format(workshops[i]))

        workshop_num += (topic_num - workshop_num)
        agenda += ", ".join(t_list)
        print_agenda(day, agenda)

    return workshop_num

def states_recent_topic():
    for i in range(len(states) - 1, -1, -1):
        if not states[i].get_topics():
            continue
        return states[i]
    return None

def gen_quizzes(day, weekday, break_name, break_len, quiz_num,
                class_state):
    """
    Quizzes
    """
    recent_topic = states_recent_topic().get_topics()[-1] \
        if states_recent_topic() else None

    if not ws_days:
        pass
    elif is_misc(day, 'quiz'):
        pass
    elif not class_state.is_classday():
        pass
    elif not class_state.week_finished():
        pass
    elif (break_name and break_len > (round(len(ws_days)*0.3))):
        print_agenda(day, "No quiz this week.")
    elif (not is_topic(recent_topic, quizzes) or
          exams.get(day, (False, False))[1]):
        print_agenda(day, "No quiz this week.")
    elif (class_state.cancel_threshold() and
          topics.count(topics[topic_num]) > class_state.len() or
          not class_state.get_topics()):
        print_agenda(day, "No quiz this week.")
    elif week > 1:
        if len(config['registrar']['crn']) > 1:
            print_agenda(day,
                         "Quiz {0} *({1} section)* *(in workshop)*: {2}"
                         .format(quiz_num + 1,
                                 class_state.section(),
                                 quizzes[quiz_num]))
        else:
             print_agenda(day,
                          "Quiz {0} *(in workshop)*: {2}".format(quiz_num + 1,
                                                 class_state.section(),
                                                 quizzes[quiz_num]))

        #if class_state.week_finished():
        #    quiz_num += 1
        quiz_num += 1

    return quiz_num


def gen_projects(day, week):
    """
    Projects and their milestones

    Rules:
        Projects start after midterms, week # or topic?
    """
    if milestones and week == milestones[0][0] and day.weekday() == 0:
        agenda = ""
        ms = milestones.pop(0)[1]
        agenda += "Project: "
        topics = []
        if isinstance(ms, list):
            for _ms in ms[:-1]:
                agenda += _ms + ", "
                topics.append(_ms)
            ms = ms[-1]

        agenda += ms + " assigned"
        topics.append(ms)
        print_agenda(day, agenda)
        for t in topics:
            dump_agenda("projects",
                        t,
                        day,
                        "Project: {0}".format(t),
                        "Project: {0}".format(t),
                        due_week_delta*7)


def gen_labs(day, weekday, break_dates, break_len, labs_num,
             class_state):
    """ Lab Assignments """
    if is_misc(day, 'lab'):
        pass
    elif (class_state.cancel_threshold() and
          topics.count(topics[topic_num]) > class_state.len()):
        print_agenda(day, "No lab assigned this week.")
        #and week > 1 \
        #and lecture_num < (len(topics) - 1) \
    #elif week < final_week \
    elif class_state.week_finished() \
        and labs_num < len(labs) \
        and is_topic(labs[labs_num]) \
        and weekday == class_state.sections_enum()[-1] \
        and not (break_dates and
                 break_len > 1 and
                 break_dates['start'] <= day <= break_dates['end']):

        agenda = "Lab "
        t_list = []
        l_num = labs_num

        for i in range(labs_num, topic_num):
            t_list.append("{0}".format(l_num + 1))
            l_num += 1

        if not t_list:
            print_agenda(day, "No lab assigned this week.")
            return labs_num

        agenda += ", ".join(t_list) + " Assigned: "

        t_list.clear()

        for i in range(labs_num, topic_num):
            t_list.append("{0}".format(labs[i]))

        for i, j in enumerate(range(labs_num, topic_num)):
            for lecture in config['gen_sched']['lectures']:

                for topic in lecture:
                    if t_list[i] == topic['title']:
                        due_day_delta = topic['due_date_delta']
                        break

            dump_agenda("labs",
                        "lab{0}".format(j + 1),
                        day,
                        "Lab Assignment #{0:02d}".format(j + 1),
                        t_list[i], due_day_delta)

        labs_num += (topic_num - labs_num)

        agenda += ", ".join(t_list)
        print_agenda(day, agenda)
    elif weekday == class_state.sections_enum()[-1]:
        print_agenda(day, "No lab assigned this week.")

    return labs_num


class ClassState:
    class State(Enum):
        pending = 0
        finished = 1
        cancelled = 2

    def __init__(self, session_start, session_end):
        self.session_start = session_start
        self.session_end = session_end
        # It's presumed that each section are equal in their lecture days
        self._states = []
        self.topic_increment = 0

        for crn in config['registrar']['crn']:  # Multiple section support
            self._states = self._states + [[] for _ in courses[crn]['days']]
            for idx, day in enumerate(courses[crn]['days']):
                # Reform lectures grouping not by section, but by lecture num
                # for that week.
                self._states[idx].append(
                    {"dow": Weekday(day),
                     "state": self.State.pending,
                     "topic": None
                     }
                )

    def topic_inc(self):
        self.topic_increment += 1

    def topic_count(self):
        return self.topic_increment

    def update_day(self, day):
        self.day = day

        if day < self.session_start or \
                day > self.session_end:
            self.cancelled()

    def reset_state(self):
        self.__init__(self.session_start, self.session_end)

    def cancelled(self):
        weekday = Weekday(self.day.weekday())
        for group in self._states:
            for lecture in group:
                if weekday is lecture['dow']:
                    lecture['state'] = self.State.cancelled

    def set_finished(self):
        weekday = Weekday(self.day.weekday())
        for group in self._states:
            for lecture in group:
                if weekday is lecture['dow']:
                    lecture['state'] = self.State.finished

    def set_topic(self, topic):
        weekday = Weekday(self.day.weekday())
        for group in self._states:
            for lecture in group:
                if weekday is lecture['dow']:
                    lecture['topic'] = topic

    def get_topics(self):
        topics = []
        for group in self._states:
            for lecture in group:
                if lecture['topic']:
                    topics.append(lecture['topic'])
        return topics

    def group(self):
        weekday = Weekday(self.day.weekday())
        dow = []
        in_group = False
        for group in self._states:
            if in_group:
                break

            for lecture in group:
                if lecture['dow'] is weekday:
                    in_group = True
                dow.append(weekday)
        return dow

    def section(self):
        weekday = Weekday(self.day.weekday())
        for crn in config['registrar']['crn']:  # Multiple section support
            for day in courses[crn]['days']:
                if weekday is Weekday(day):
                    return courses[crn]['days']
        return ""

    def sections(self):
        days = []
        for crn in config['registrar']['crn']:  # Multiple section support
            for day in courses[crn]['days']:
                    days.append(day)
        return days

    def sections_enum(self):
        return [Weekday(day) for day in self.sections()]

    def section_enum(self):
        return [Weekday(day) for day in self.section()]

    def section_finished(self):
        done = True
        sect = self.section_enum()

        for group in self._states:
            for lecture in group:
                if lecture['dow'] in sect and\
                        lecture['state'] is self.State.pending:
                    done = False

        return done

    def group_finished(self):
        done = True
        weekday = Weekday(self.day.weekday())

        in_group = False

        for group in self._states:
            if in_group:
                break

            for lecture in group:
                if lecture['dow'] is weekday:
                    in_group = True  # In lecture 'group'

                if in_group and lecture['state'] is self.State.pending:
                    done = False

        return done

    def week_finished(self):
        done = True

        for group in self._states:
            for lecture in group:
                if lecture['state'] is self.State.pending:
                    done = False

        return done

    def cancel_threshold(self, future=False):
        """
        Do we exceed a cancel threshold of lectures for the week?
        """
        thresh = 0.5  # 50%
        _true = 0

        if future:
            dow_t = Weekday(self.day.weekday())
            class_dow = self.sections_enum()
            i = len(class_dow)

            for dow in class_dow:
                diff = timedelta(days=dow - dow_t)
                if self.get_break(day=self.day+diff)[0]:
                    _true += 1
        else:
            for i, d in enumerate(self._states):
                for l in d:
                    if self.State.cancelled is l['state']:
                        _true += 1

                    i += 1

        return _true/i >= thresh

    def get_break(self, day=None):
        day = self.day if not day else day

        for (break_name, break_dates) in breaks.items():
            if day >= break_dates["start"] \
                    and day <= break_dates["end"]:
                return break_name, break_dates

        return None, None

    def is_break(self, day=None):
        day = self.day if not day else day

        for (break_name, break_dates) in breaks.items():
            if day >= break_dates["start"] \
                    and day <= break_dates["end"]:
                return True

        return False

    def is_classday(self):
        weekday = Weekday(self.day.weekday())
        for group in self._states:
            for lecture in group:
                if weekday is lecture['dow']:
                    return True
        return False

    def len(self):
        length = 0
        for group in self._states:
            length += len(group)
        return length


def gen_sched():
    global lecture_num, workshop_num, quiz_num, labs_num, topic_num,\
        break_bump, week, session_start, total_days

    # If our acadmic start date isn't a monday (our beginning of the week),
    # shift it to make the week-counting calculations correct.
    class_state = ClassState(session_start, session_end)

    for i in range(total_days):
        aday = adj_session_start + timedelta(days=i)
        week = int(i/7) + 1
        weekday = Weekday(aday.weekday())

        class_state.update_day(aday)
        #
        # Current week row header
        #
        if i % 7 == 0:
            states.append(class_state)
            class_state = ClassState(session_start, session_end)
            class_state.update_day(aday)
            print_agenda(None, "Week {0:0d},,".format(week))


        if i < session_start_weekday:
            continue

        # Miscellaneous Items
        gen_misc(aday, class_state)

        # Academic breaks
        break_name, break_dates, break_len = gen_breaks(aday, class_state)

        # Exams
        gen_exams(aday, break_name, class_state)

        # Lectures
        lecture_num, topic_num = gen_lectures(aday, weekday, lecture_num,
                                              break_name, break_dates,
                                              break_len,
                                              topic_num,
                                              class_state)

        # Workshop Cycles
        workshop_num = gen_workshop(aday, weekday, break_name,
                                    break_len, workshop_num,
                                    class_state)

        # Quizzes
        quiz_num = gen_quizzes(aday, weekday, break_name, break_len, quiz_num,
                               class_state)

        # Lab Assignments
        labs_num = gen_labs(aday, weekday, break_dates, break_len, labs_num,
                            class_state)

        gen_projects(aday, week)

    with open(config['gen_sched']['yaml_output_file'], "w") as f:
        f.write(yaml.dump(dump_dict))

with open(sched_file, 'w') as sched_fh:
    gen_sched()
